// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MonsterSlayersAPI.Security.DAL.Data;

#nullable disable

namespace MonsterSlayersAPI.DAL.Migrations
{
    [DbContext(typeof(MonsterSlayersContext))]
    [Migration("20231120165006_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("GAME")
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MonsterSlayersAPI.BLL.Entities.Battle", b =>
                {
                    b.Property<int>("BattleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BattleId"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TeamWinner")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ZoneId")
                        .HasColumnType("int");

                    b.HasKey("BattleId");

                    b.HasIndex("ZoneId");

                    b.ToTable("Battle", "GAME");
                });

            modelBuilder.Entity("MonsterSlayersAPI.BLL.Entities.BattleAction", b =>
                {
                    b.Property<int>("BattleActionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BattleActionId"));

                    b.Property<int>("BattleId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("BattleActionId");

                    b.HasIndex("BattleId");

                    b.HasIndex("SkillId");

                    b.ToTable("BattleAction", "GAME");
                });

            modelBuilder.Entity("MonsterSlayersAPI.BLL.Entities.BattleActionAffected", b =>
                {
                    b.Property<int>("BattleActionAffectedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BattleActionAffectedId"));

                    b.Property<int>("BattleActionId")
                        .HasColumnType("int");

                    b.Property<int>("BattleId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatureId")
                        .HasColumnType("int");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BattleActionAffectedId");

                    b.HasIndex("BattleActionId");

                    b.HasIndex("BattleId");

                    b.HasIndex("CreatureId");

                    b.ToTable("BattleActionAffected", "GAME");
                });

            modelBuilder.Entity("MonsterSlayersAPI.BLL.Entities.BattleParticipant", b =>
                {
                    b.Property<int>("BattleId")
                        .HasColumnType("int");

                    b.Property<int>("CreatureId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Team")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BattleId", "CreatureId");

                    b.HasIndex("CreatureId");

                    b.ToTable("BattleParticipant", "GAME");
                });

            modelBuilder.Entity("MonsterSlayersAPI.BLL.Entities.Character", b =>
                {
                    b.Property<int>("CharacterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CharacterId"));

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatureId")
                        .HasColumnType("int");

                    b.Property<int>("CritDamage")
                        .HasColumnType("int");

                    b.Property<int>("CritRate")
                        .HasColumnType("int");

                    b.Property<int>("CurrentHP")
                        .HasColumnType("int");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Dexterity")
                        .HasColumnType("int");

                    b.Property<int>("DexterityPoints")
                        .HasColumnType("int");

                    b.Property<int>("Experience")
                        .HasColumnType("int");

                    b.Property<int>("Faith")
                        .HasColumnType("int");

                    b.Property<int>("FaithPoints")
                        .HasColumnType("int");

                    b.Property<int>("HP")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Intelligence")
                        .HasColumnType("int");

                    b.Property<int>("IntelligencePoints")
                        .HasColumnType("int");

                    b.Property<int>("Mana")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Nivel")
                        .HasColumnType("int");

                    b.Property<int>("Speed")
                        .HasColumnType("int");

                    b.Property<int>("Stamina")
                        .HasColumnType("int");

                    b.Property<int>("Strength")
                        .HasColumnType("int");

                    b.Property<int>("StrengthPoints")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("Vitality")
                        .HasColumnType("int");

                    b.Property<int>("VitalityPoints")
                        .HasColumnType("int");

                    b.Property<int>("ZoneId")
                        .HasColumnType("int");

                    b.HasKey("CharacterId");

                    b.HasIndex("ClassId");

                    b.HasIndex("CreatureId");

                    b.HasIndex("UserId");

                    b.HasIndex("ZoneId");

                    b.ToTable("Character", "GAME");

                    b.HasData(
                        new
                        {
                            CharacterId = 1,
                            ClassId = 1,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(3925),
                            CreatureId = 2,
                            CritDamage = 2,
                            CritRate = 2,
                            CurrentHP = 10,
                            Dexterity = 1,
                            DexterityPoints = 1,
                            Experience = 0,
                            Faith = 1,
                            FaithPoints = 1,
                            HP = 10,
                            Image = "ImageR",
                            Intelligence = 1,
                            IntelligencePoints = 1,
                            Mana = 10,
                            Name = "Reonburakku",
                            Nivel = 1,
                            Speed = 20,
                            Stamina = 6,
                            Strength = 1,
                            StrengthPoints = 1,
                            UserId = 1,
                            Vitality = 1,
                            VitalityPoints = 1,
                            ZoneId = 1
                        });
                });

            modelBuilder.Entity("MonsterSlayersAPI.BLL.Entities.CharacterResistance", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("DamageTypeId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("CharacterId", "DamageTypeId");

                    b.HasIndex("DamageTypeId");

                    b.ToTable("CharacterResistance", "GAME");
                });

            modelBuilder.Entity("MonsterSlayersAPI.BLL.Entities.CharacterSkill", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.Property<int?>("ClassId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("CharacterId", "SkillId");

                    b.HasIndex("ClassId");

                    b.HasIndex("SkillId");

                    b.ToTable("CharacterSkill", "GAME");
                });

            modelBuilder.Entity("MonsterSlayersAPI.BLL.Entities.Class", b =>
                {
                    b.Property<int>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClassId"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<double>("DexterityRate")
                        .HasColumnType("float");

                    b.Property<double>("FaithhRate")
                        .HasColumnType("float");

                    b.Property<bool>("ForPlayer")
                        .HasColumnType("bit");

                    b.Property<double>("HPRate")
                        .HasColumnType("float");

                    b.Property<double>("IntelligenceRate")
                        .HasColumnType("float");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("StrengthRate")
                        .HasColumnType("float");

                    b.HasKey("ClassId");

                    b.ToTable("Class", "GAME");

                    b.HasData(
                        new
                        {
                            ClassId = 1,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(4445),
                            DexterityRate = 1.0,
                            FaithhRate = 1.0,
                            ForPlayer = false,
                            HPRate = 1.0,
                            IntelligenceRate = 1.0,
                            Logo = "MonsterLogo",
                            Name = "Monster",
                            StrengthRate = 1.0
                        },
                        new
                        {
                            ClassId = 2,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(4467),
                            DexterityRate = 1.0,
                            FaithhRate = 1.0,
                            ForPlayer = true,
                            HPRate = 1.0,
                            IntelligenceRate = 1.0,
                            Logo = "MageLogo",
                            Name = "Mage",
                            StrengthRate = 1.0
                        },
                        new
                        {
                            ClassId = 3,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(4483),
                            DexterityRate = 1.0,
                            FaithhRate = 1.0,
                            ForPlayer = true,
                            HPRate = 1.0,
                            IntelligenceRate = 1.0,
                            Logo = "WarriorLogo",
                            Name = "Warrior",
                            StrengthRate = 1.0
                        },
                        new
                        {
                            ClassId = 4,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(4499),
                            DexterityRate = 1.0,
                            FaithhRate = 1.0,
                            ForPlayer = true,
                            HPRate = 1.0,
                            IntelligenceRate = 1.0,
                            Logo = "ClericLogo",
                            Name = "Cleric",
                            StrengthRate = 1.0
                        });
                });

            modelBuilder.Entity("MonsterSlayersAPI.BLL.Entities.ClassResource", b =>
                {
                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("ResourceTypeId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClassId", "LanguageId", "ResourceTypeId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ResourceTypeId");

                    b.ToTable("ClassResource", "GAME");

                    b.HasData(
                        new
                        {
                            ClassId = 1,
                            LanguageId = 1,
                            ResourceTypeId = 1,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(4516),
                            Value = "Monstruo"
                        },
                        new
                        {
                            ClassId = 2,
                            LanguageId = 1,
                            ResourceTypeId = 1,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(4533),
                            Value = "Mago"
                        },
                        new
                        {
                            ClassId = 3,
                            LanguageId = 1,
                            ResourceTypeId = 1,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(4546),
                            Value = "Guerrero"
                        },
                        new
                        {
                            ClassId = 4,
                            LanguageId = 1,
                            ResourceTypeId = 1,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(4558),
                            Value = "Clérigo"
                        },
                        new
                        {
                            ClassId = 1,
                            LanguageId = 1,
                            ResourceTypeId = 2,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(4571),
                            Value = "Criatura que habita el mundo y gusta de deborar humanos."
                        },
                        new
                        {
                            ClassId = 2,
                            LanguageId = 1,
                            ResourceTypeId = 2,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(4586),
                            Value = "Estudiante de las artes arcanas, capaz de crear grandes daños elementales."
                        },
                        new
                        {
                            ClassId = 3,
                            LanguageId = 1,
                            ResourceTypeId = 2,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(4599),
                            Value = "Luchador entrenado para la batalla, fuerte y resistente."
                        },
                        new
                        {
                            ClassId = 4,
                            LanguageId = 1,
                            ResourceTypeId = 2,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(4611),
                            Value = "Para muchos, enviado de los dioses, especialistas en curar y mejorar humanos."
                        },
                        new
                        {
                            ClassId = 1,
                            LanguageId = 2,
                            ResourceTypeId = 1,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(4645),
                            Value = "Monster"
                        },
                        new
                        {
                            ClassId = 2,
                            LanguageId = 2,
                            ResourceTypeId = 1,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(4659),
                            Value = "Wizard"
                        },
                        new
                        {
                            ClassId = 3,
                            LanguageId = 2,
                            ResourceTypeId = 1,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(4673),
                            Value = "Warrior"
                        },
                        new
                        {
                            ClassId = 4,
                            LanguageId = 2,
                            ResourceTypeId = 1,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(4685),
                            Value = "Cleric"
                        },
                        new
                        {
                            ClassId = 1,
                            LanguageId = 2,
                            ResourceTypeId = 2,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(4698),
                            Value = "Creature that inhabits the world and likes to devour humans."
                        },
                        new
                        {
                            ClassId = 2,
                            LanguageId = 2,
                            ResourceTypeId = 2,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(4712),
                            Value = "Student of the arcane arts, capable of creating great elemental damage."
                        },
                        new
                        {
                            ClassId = 3,
                            LanguageId = 2,
                            ResourceTypeId = 2,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(4724),
                            Value = "Fighter trained for battle, strong and resistant."
                        },
                        new
                        {
                            ClassId = 4,
                            LanguageId = 2,
                            ResourceTypeId = 2,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(4737),
                            Value = "For many, sent from the gods, specialists in healing and improving humans."
                        });
                });

            modelBuilder.Entity("MonsterSlayersAPI.BLL.Entities.ClassSkill", b =>
                {
                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("ClassId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("ClassSkill", "GAME");
                });

            modelBuilder.Entity("MonsterSlayersAPI.BLL.Entities.Creature", b =>
                {
                    b.Property<int>("CreatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CreatureId"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("CreatureId");

                    b.ToTable("Creature", "GAME");

                    b.HasData(
                        new
                        {
                            CreatureId = 1,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(3815)
                        },
                        new
                        {
                            CreatureId = 2,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(3841)
                        },
                        new
                        {
                            CreatureId = 3,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(3882)
                        },
                        new
                        {
                            CreatureId = 4,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(3898)
                        });
                });

            modelBuilder.Entity("MonsterSlayersAPI.BLL.Entities.DamageType", b =>
                {
                    b.Property<int>("DamageTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DamageTypeId"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DamageTypeId");

                    b.ToTable("DamageType", "GAME");

                    b.HasData(
                        new
                        {
                            DamageTypeId = 1,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(4031),
                            Image = "LightningLogo",
                            Name = "Lightning"
                        },
                        new
                        {
                            DamageTypeId = 2,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(4050),
                            Image = "FireLogo",
                            Name = "Fire"
                        },
                        new
                        {
                            DamageTypeId = 3,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(4066),
                            Image = "WaterLogo",
                            Name = "Water"
                        },
                        new
                        {
                            DamageTypeId = 4,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(4083),
                            Image = "WindLogo",
                            Name = "Wind"
                        },
                        new
                        {
                            DamageTypeId = 5,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(4099),
                            Image = "EarthLogo",
                            Name = "Earth"
                        },
                        new
                        {
                            DamageTypeId = 6,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(4118),
                            Image = "RadiantLogo",
                            Name = "Radiant"
                        },
                        new
                        {
                            DamageTypeId = 7,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(4134),
                            Image = "NeutralLogo",
                            Name = "Neutral"
                        },
                        new
                        {
                            DamageTypeId = 8,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(4150),
                            Image = "AcidLogo",
                            Name = "Acid"
                        });
                });

            modelBuilder.Entity("MonsterSlayersAPI.BLL.Entities.DamageTypeResource", b =>
                {
                    b.Property<int>("DamageTypeId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("ResourceTypeId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DamageTypeId", "LanguageId", "ResourceTypeId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ResourceTypeId");

                    b.ToTable("DamageTypeResource", "GAME");

                    b.HasData(
                        new
                        {
                            DamageTypeId = 1,
                            LanguageId = 1,
                            ResourceTypeId = 1,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(4168),
                            Value = "Rayo"
                        },
                        new
                        {
                            DamageTypeId = 2,
                            LanguageId = 1,
                            ResourceTypeId = 1,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(4188),
                            Value = "Fuego"
                        },
                        new
                        {
                            DamageTypeId = 3,
                            LanguageId = 1,
                            ResourceTypeId = 1,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(4203),
                            Value = "Agua"
                        },
                        new
                        {
                            DamageTypeId = 4,
                            LanguageId = 1,
                            ResourceTypeId = 1,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(4218),
                            Value = "Aire"
                        },
                        new
                        {
                            DamageTypeId = 5,
                            LanguageId = 1,
                            ResourceTypeId = 1,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(4232),
                            Value = "Tierra"
                        },
                        new
                        {
                            DamageTypeId = 6,
                            LanguageId = 1,
                            ResourceTypeId = 1,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(4248),
                            Value = "Radiante"
                        },
                        new
                        {
                            DamageTypeId = 7,
                            LanguageId = 1,
                            ResourceTypeId = 1,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(4285),
                            Value = "Neutro"
                        },
                        new
                        {
                            DamageTypeId = 8,
                            LanguageId = 1,
                            ResourceTypeId = 1,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(4301),
                            Value = "Ácido"
                        },
                        new
                        {
                            DamageTypeId = 1,
                            LanguageId = 2,
                            ResourceTypeId = 1,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(4316),
                            Value = "Lightning"
                        },
                        new
                        {
                            DamageTypeId = 2,
                            LanguageId = 2,
                            ResourceTypeId = 1,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(4333),
                            Value = "Fire"
                        },
                        new
                        {
                            DamageTypeId = 3,
                            LanguageId = 2,
                            ResourceTypeId = 1,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(4348),
                            Value = "Water"
                        },
                        new
                        {
                            DamageTypeId = 4,
                            LanguageId = 2,
                            ResourceTypeId = 1,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(4361),
                            Value = "Wind"
                        },
                        new
                        {
                            DamageTypeId = 5,
                            LanguageId = 2,
                            ResourceTypeId = 1,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(4375),
                            Value = "Earth"
                        },
                        new
                        {
                            DamageTypeId = 6,
                            LanguageId = 2,
                            ResourceTypeId = 1,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(4390),
                            Value = "Radiant"
                        },
                        new
                        {
                            DamageTypeId = 7,
                            LanguageId = 2,
                            ResourceTypeId = 1,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(4404),
                            Value = "Neutral"
                        },
                        new
                        {
                            DamageTypeId = 8,
                            LanguageId = 2,
                            ResourceTypeId = 1,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(4419),
                            Value = "Acid"
                        });
                });

            modelBuilder.Entity("MonsterSlayersAPI.BLL.Entities.Language", b =>
                {
                    b.Property<int>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LanguageId"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LanguageId");

                    b.ToTable("Language", "GAME");

                    b.HasData(
                        new
                        {
                            LanguageId = 1,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(3948),
                            Name = "Español"
                        },
                        new
                        {
                            LanguageId = 2,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(3969),
                            Name = "English"
                        });
                });

            modelBuilder.Entity("MonsterSlayersAPI.BLL.Entities.MessageResource", b =>
                {
                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("MessageName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LanguageId", "MessageName");

                    b.ToTable("MessageResource", "GAME");

                    b.HasData(
                        new
                        {
                            LanguageId = 1,
                            MessageName = "AttackSuccess",
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(4876),
                            Value = "{target} recibe {damage} puntos de daño de {damagetype}."
                        },
                        new
                        {
                            LanguageId = 1,
                            MessageName = "AttackFail",
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(4894),
                            Value = "Ataque fallido."
                        },
                        new
                        {
                            LanguageId = 1,
                            MessageName = "Heal",
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(4910),
                            Value = "{target} recibe {heal} puntos de curación."
                        },
                        new
                        {
                            LanguageId = 1,
                            MessageName = "NotYourTurn",
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(4925),
                            Value = "No es tu turno."
                        },
                        new
                        {
                            LanguageId = 1,
                            MessageName = "Win",
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(4941),
                            Value = "Has ganado."
                        },
                        new
                        {
                            LanguageId = 1,
                            MessageName = "Loose",
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(4956),
                            Value = "Has perdido."
                        },
                        new
                        {
                            LanguageId = 2,
                            MessageName = "AttackSuccess",
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(4971),
                            Value = "{target} got {damage} {damagetype} damage proints."
                        },
                        new
                        {
                            LanguageId = 2,
                            MessageName = "AttackFail",
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(4987),
                            Value = "Atack failed."
                        },
                        new
                        {
                            LanguageId = 2,
                            MessageName = "Heal",
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(5024),
                            Value = "{target} got {heal} healing points."
                        },
                        new
                        {
                            LanguageId = 2,
                            MessageName = "NotYourTurn",
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(5041),
                            Value = "Is not your turn."
                        },
                        new
                        {
                            LanguageId = 2,
                            MessageName = "Win",
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(5056),
                            Value = "You win."
                        },
                        new
                        {
                            LanguageId = 2,
                            MessageName = "Loose",
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(5071),
                            Value = "You Loose."
                        });
                });

            modelBuilder.Entity("MonsterSlayersAPI.BLL.Entities.Monster", b =>
                {
                    b.Property<int>("MonsterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MonsterId"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatureId")
                        .HasColumnType("int");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("HP")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Mana")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Nivel")
                        .HasColumnType("int");

                    b.Property<int>("Speed")
                        .HasColumnType("int");

                    b.Property<int>("Stamina")
                        .HasColumnType("int");

                    b.HasKey("MonsterId");

                    b.HasIndex("CreatureId");

                    b.ToTable("Monster", "GAME");

                    b.HasData(
                        new
                        {
                            MonsterId = 1,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(5093),
                            CreatureId = 1,
                            HP = 500,
                            Image = "",
                            Mana = 50,
                            Name = "Black Dragon",
                            Nivel = 50,
                            Speed = 50,
                            Stamina = 10
                        },
                        new
                        {
                            MonsterId = 2,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(5113),
                            CreatureId = 3,
                            HP = 10,
                            Image = "",
                            Mana = 0,
                            Name = "Slime",
                            Nivel = 1,
                            Speed = 5,
                            Stamina = 6
                        },
                        new
                        {
                            MonsterId = 3,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(5130),
                            CreatureId = 4,
                            HP = 40,
                            Image = "",
                            Mana = 0,
                            Name = "Wolf",
                            Nivel = 2,
                            Speed = 30,
                            Stamina = 6
                        });
                });

            modelBuilder.Entity("MonsterSlayersAPI.BLL.Entities.MonsterResistance", b =>
                {
                    b.Property<int>("MonsterId")
                        .HasColumnType("int");

                    b.Property<int>("DamageTypeId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("MonsterId", "DamageTypeId");

                    b.HasIndex("DamageTypeId");

                    b.ToTable("MonsterResistance", "GAME");

                    b.HasData(
                        new
                        {
                            MonsterId = 1,
                            DamageTypeId = 1,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(5350),
                            Value = 0
                        },
                        new
                        {
                            MonsterId = 1,
                            DamageTypeId = 2,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(5369),
                            Value = 0
                        },
                        new
                        {
                            MonsterId = 1,
                            DamageTypeId = 3,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(5404),
                            Value = 0
                        },
                        new
                        {
                            MonsterId = 1,
                            DamageTypeId = 4,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(5418),
                            Value = 0
                        },
                        new
                        {
                            MonsterId = 1,
                            DamageTypeId = 5,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(5432),
                            Value = 0
                        },
                        new
                        {
                            MonsterId = 1,
                            DamageTypeId = 6,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(5447),
                            Value = 0
                        },
                        new
                        {
                            MonsterId = 1,
                            DamageTypeId = 7,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(5461),
                            Value = 0
                        },
                        new
                        {
                            MonsterId = 1,
                            DamageTypeId = 8,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(5475),
                            Value = 0
                        },
                        new
                        {
                            MonsterId = 2,
                            DamageTypeId = 1,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(5489),
                            Value = 0
                        },
                        new
                        {
                            MonsterId = 2,
                            DamageTypeId = 2,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(5504),
                            Value = 0
                        },
                        new
                        {
                            MonsterId = 2,
                            DamageTypeId = 3,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(5517),
                            Value = 0
                        },
                        new
                        {
                            MonsterId = 2,
                            DamageTypeId = 4,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(5531),
                            Value = 0
                        },
                        new
                        {
                            MonsterId = 2,
                            DamageTypeId = 5,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(5545),
                            Value = 0
                        },
                        new
                        {
                            MonsterId = 2,
                            DamageTypeId = 6,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(5559),
                            Value = 0
                        },
                        new
                        {
                            MonsterId = 2,
                            DamageTypeId = 7,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(5572),
                            Value = 0
                        },
                        new
                        {
                            MonsterId = 2,
                            DamageTypeId = 8,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(5586),
                            Value = 0
                        },
                        new
                        {
                            MonsterId = 3,
                            DamageTypeId = 1,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(5600),
                            Value = 0
                        },
                        new
                        {
                            MonsterId = 3,
                            DamageTypeId = 2,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(5616),
                            Value = 0
                        },
                        new
                        {
                            MonsterId = 3,
                            DamageTypeId = 3,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(5630),
                            Value = 0
                        },
                        new
                        {
                            MonsterId = 3,
                            DamageTypeId = 4,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(5643),
                            Value = 0
                        },
                        new
                        {
                            MonsterId = 3,
                            DamageTypeId = 5,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(5658),
                            Value = 0
                        },
                        new
                        {
                            MonsterId = 3,
                            DamageTypeId = 6,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(5671),
                            Value = 0
                        },
                        new
                        {
                            MonsterId = 3,
                            DamageTypeId = 7,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(5686),
                            Value = 0
                        },
                        new
                        {
                            MonsterId = 3,
                            DamageTypeId = 8,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(5700),
                            Value = 0
                        });
                });

            modelBuilder.Entity("MonsterSlayersAPI.BLL.Entities.MonsterResource", b =>
                {
                    b.Property<int>("MonsterId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("ResourceTypeId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MonsterId", "LanguageId", "ResourceTypeId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ResourceTypeId");

                    b.ToTable("MonsterResource", "GAME");

                    b.HasData(
                        new
                        {
                            MonsterId = 1,
                            LanguageId = 1,
                            ResourceTypeId = 1,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(5151),
                            Value = "Dragón negro"
                        },
                        new
                        {
                            MonsterId = 1,
                            LanguageId = 1,
                            ResourceTypeId = 2,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(5171),
                            Value = "un gran dragón negro"
                        },
                        new
                        {
                            MonsterId = 2,
                            LanguageId = 1,
                            ResourceTypeId = 1,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(5187),
                            Value = "Limo"
                        },
                        new
                        {
                            MonsterId = 2,
                            LanguageId = 1,
                            ResourceTypeId = 2,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(5203),
                            Value = "Una masa que lastima al contacto"
                        },
                        new
                        {
                            MonsterId = 3,
                            LanguageId = 1,
                            ResourceTypeId = 1,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(5220),
                            Value = "Lobo"
                        },
                        new
                        {
                            MonsterId = 3,
                            LanguageId = 1,
                            ResourceTypeId = 2,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(5237),
                            Value = "Una criatura salvaje"
                        },
                        new
                        {
                            MonsterId = 1,
                            LanguageId = 2,
                            ResourceTypeId = 1,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(5253),
                            Value = "Black Dragon"
                        },
                        new
                        {
                            MonsterId = 1,
                            LanguageId = 2,
                            ResourceTypeId = 2,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(5268),
                            Value = "A great black dragon"
                        },
                        new
                        {
                            MonsterId = 2,
                            LanguageId = 2,
                            ResourceTypeId = 1,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(5284),
                            Value = "Slime"
                        },
                        new
                        {
                            MonsterId = 2,
                            LanguageId = 2,
                            ResourceTypeId = 2,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(5300),
                            Value = "A mass that hurts on contact"
                        },
                        new
                        {
                            MonsterId = 3,
                            LanguageId = 2,
                            ResourceTypeId = 1,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(5316),
                            Value = "Wolf"
                        },
                        new
                        {
                            MonsterId = 3,
                            LanguageId = 2,
                            ResourceTypeId = 2,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(5332),
                            Value = "A wild creature"
                        });
                });

            modelBuilder.Entity("MonsterSlayersAPI.BLL.Entities.MonsterSkill", b =>
                {
                    b.Property<int>("MonsterId")
                        .HasColumnType("int");

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("MonsterId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("MonsterSkill", "GAME");

                    b.HasData(
                        new
                        {
                            MonsterId = 1,
                            SkillId = 1,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(5931)
                        },
                        new
                        {
                            MonsterId = 1,
                            SkillId = 3,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(5950)
                        },
                        new
                        {
                            MonsterId = 2,
                            SkillId = 2,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(5966)
                        },
                        new
                        {
                            MonsterId = 3,
                            SkillId = 3,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(5981)
                        });
                });

            modelBuilder.Entity("MonsterSlayersAPI.BLL.Entities.MonsterZone", b =>
                {
                    b.Property<int>("MonsterId")
                        .HasColumnType("int");

                    b.Property<int>("ZoneId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("MonsterId", "ZoneId");

                    b.HasIndex("ZoneId");

                    b.ToTable("MonsterZone", "GAME");

                    b.HasData(
                        new
                        {
                            MonsterId = 2,
                            ZoneId = 2,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(5720)
                        },
                        new
                        {
                            MonsterId = 3,
                            ZoneId = 2,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(5754)
                        });
                });

            modelBuilder.Entity("MonsterSlayersAPI.BLL.Entities.ResourceType", b =>
                {
                    b.Property<int>("ResourceTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResourceTypeId"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ResourceTypeId");

                    b.ToTable("ResourceType", "GAME");

                    b.HasData(
                        new
                        {
                            ResourceTypeId = 1,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(3988),
                            Value = "Name"
                        },
                        new
                        {
                            ResourceTypeId = 2,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(4008),
                            Value = "Description"
                        });
                });

            modelBuilder.Entity("MonsterSlayersAPI.BLL.Entities.Skill", b =>
                {
                    b.Property<int>("SkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SkillId"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("DamageDice")
                        .HasColumnType("int");

                    b.Property<int>("DamageTypeId")
                        .HasColumnType("int");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ManaCost")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SkillId");

                    b.HasIndex("DamageTypeId");

                    b.ToTable("Skill", "GAME");

                    b.HasData(
                        new
                        {
                            SkillId = 1,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(5776),
                            DamageDice = 1,
                            DamageTypeId = 7,
                            Image = "PunchLogo",
                            ManaCost = 0,
                            Name = "Punch"
                        },
                        new
                        {
                            SkillId = 2,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(5797),
                            DamageDice = 1,
                            DamageTypeId = 8,
                            Image = "AcidPunchLogo",
                            ManaCost = 0,
                            Name = "AcidPunch"
                        },
                        new
                        {
                            SkillId = 3,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(5815),
                            DamageDice = 1,
                            DamageTypeId = 7,
                            Image = "BiteLogo",
                            ManaCost = 0,
                            Name = "Bite"
                        });
                });

            modelBuilder.Entity("MonsterSlayersAPI.BLL.Entities.SkillResource", b =>
                {
                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("ResourceTypeId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SkillId", "LanguageId", "ResourceTypeId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ResourceTypeId");

                    b.ToTable("SkillResource", "GAME");

                    b.HasData(
                        new
                        {
                            SkillId = 1,
                            LanguageId = 1,
                            ResourceTypeId = 1,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(5833),
                            Value = "Punch"
                        },
                        new
                        {
                            SkillId = 1,
                            LanguageId = 2,
                            ResourceTypeId = 1,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(5851),
                            Value = "Puño"
                        },
                        new
                        {
                            SkillId = 2,
                            LanguageId = 1,
                            ResourceTypeId = 1,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(5865),
                            Value = "Puño ácido"
                        },
                        new
                        {
                            SkillId = 2,
                            LanguageId = 2,
                            ResourceTypeId = 1,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(5882),
                            Value = "Acid punch"
                        },
                        new
                        {
                            SkillId = 3,
                            LanguageId = 1,
                            ResourceTypeId = 1,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(5897),
                            Value = "Mordisco"
                        },
                        new
                        {
                            SkillId = 3,
                            LanguageId = 2,
                            ResourceTypeId = 1,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(5912),
                            Value = "Bite"
                        });
                });

            modelBuilder.Entity("MonsterSlayersAPI.BLL.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("ASPUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(900)");

                    b.Property<int?>("ClassId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("ClassId");

                    b.ToTable("User", "GAME");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            ASPUserId = "",
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(3691),
                            Name = "Snorlax"
                        });
                });

            modelBuilder.Entity("MonsterSlayersAPI.BLL.Entities.Zone", b =>
                {
                    b.Property<int>("ZoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ZoneId"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ZoneId");

                    b.ToTable("Zone", "GAME");

                    b.HasData(
                        new
                        {
                            ZoneId = 1,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(4759),
                            Image = "CityBackGround",
                            Name = "City"
                        },
                        new
                        {
                            ZoneId = 2,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(4777),
                            Image = "FieldBackGround",
                            Name = "Field"
                        });
                });

            modelBuilder.Entity("MonsterSlayersAPI.BLL.Entities.ZoneResource", b =>
                {
                    b.Property<int>("ZoneId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("ResourceTypeId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ZoneId", "LanguageId", "ResourceTypeId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ResourceTypeId");

                    b.ToTable("ZoneResource", "GAME");

                    b.HasData(
                        new
                        {
                            ZoneId = 1,
                            LanguageId = 1,
                            ResourceTypeId = 1,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(4801),
                            Value = "Ciudad"
                        },
                        new
                        {
                            ZoneId = 2,
                            LanguageId = 1,
                            ResourceTypeId = 1,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(4819),
                            Value = "Pradera"
                        },
                        new
                        {
                            ZoneId = 1,
                            LanguageId = 2,
                            ResourceTypeId = 1,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(4835),
                            Value = "City"
                        },
                        new
                        {
                            ZoneId = 2,
                            LanguageId = 2,
                            ResourceTypeId = 1,
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2023, 11, 20, 11, 50, 5, 783, DateTimeKind.Local).AddTicks(4852),
                            Value = "Field"
                        });
                });

            modelBuilder.Entity("MonsterSlayersAPI.BLL.Entities.Battle", b =>
                {
                    b.HasOne("MonsterSlayersAPI.BLL.Entities.Zone", "Zone")
                        .WithMany()
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("MonsterSlayersAPI.BLL.Entities.BattleAction", b =>
                {
                    b.HasOne("MonsterSlayersAPI.BLL.Entities.Battle", "Battle")
                        .WithMany("BattleActions")
                        .HasForeignKey("BattleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MonsterSlayersAPI.BLL.Entities.Skill", "Skill")
                        .WithMany("BattleActions")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Battle");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("MonsterSlayersAPI.BLL.Entities.BattleActionAffected", b =>
                {
                    b.HasOne("MonsterSlayersAPI.BLL.Entities.BattleAction", "BattleAction")
                        .WithMany("BattleActionAffecteds")
                        .HasForeignKey("BattleActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MonsterSlayersAPI.BLL.Entities.Battle", "Battle")
                        .WithMany()
                        .HasForeignKey("BattleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MonsterSlayersAPI.BLL.Entities.Creature", "Creature")
                        .WithMany("BattleActionAffected")
                        .HasForeignKey("CreatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Battle");

                    b.Navigation("BattleAction");

                    b.Navigation("Creature");
                });

            modelBuilder.Entity("MonsterSlayersAPI.BLL.Entities.BattleParticipant", b =>
                {
                    b.HasOne("MonsterSlayersAPI.BLL.Entities.Battle", "Battle")
                        .WithMany("BattleParticipants")
                        .HasForeignKey("BattleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MonsterSlayersAPI.BLL.Entities.Creature", "Creature")
                        .WithMany("BattleParticipants")
                        .HasForeignKey("CreatureId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Battle");

                    b.Navigation("Creature");
                });

            modelBuilder.Entity("MonsterSlayersAPI.BLL.Entities.Character", b =>
                {
                    b.HasOne("MonsterSlayersAPI.BLL.Entities.Class", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MonsterSlayersAPI.BLL.Entities.Creature", "Creature")
                        .WithMany("Characters")
                        .HasForeignKey("CreatureId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MonsterSlayersAPI.BLL.Entities.User", "User")
                        .WithMany("Characters")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MonsterSlayersAPI.BLL.Entities.Zone", "Zone")
                        .WithMany()
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Creature");

                    b.Navigation("User");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("MonsterSlayersAPI.BLL.Entities.CharacterResistance", b =>
                {
                    b.HasOne("MonsterSlayersAPI.BLL.Entities.Character", "Character")
                        .WithMany("CharacterResistances")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MonsterSlayersAPI.BLL.Entities.DamageType", "DamageType")
                        .WithMany("CharacterResistances")
                        .HasForeignKey("DamageTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("DamageType");
                });

            modelBuilder.Entity("MonsterSlayersAPI.BLL.Entities.CharacterSkill", b =>
                {
                    b.HasOne("MonsterSlayersAPI.BLL.Entities.Character", "Character")
                        .WithMany("CharacterSkills")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MonsterSlayersAPI.BLL.Entities.Class", null)
                        .WithMany("CharacterSkill")
                        .HasForeignKey("ClassId");

                    b.HasOne("MonsterSlayersAPI.BLL.Entities.Skill", "Skill")
                        .WithMany("CharacterSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("MonsterSlayersAPI.BLL.Entities.ClassResource", b =>
                {
                    b.HasOne("MonsterSlayersAPI.BLL.Entities.Class", "Class")
                        .WithMany("ClassResources")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MonsterSlayersAPI.BLL.Entities.Language", "Language")
                        .WithMany("ClassResources")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MonsterSlayersAPI.BLL.Entities.ResourceType", "ResourceType")
                        .WithMany("ClassResources")
                        .HasForeignKey("ResourceTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Language");

                    b.Navigation("ResourceType");
                });

            modelBuilder.Entity("MonsterSlayersAPI.BLL.Entities.ClassSkill", b =>
                {
                    b.HasOne("MonsterSlayersAPI.BLL.Entities.Class", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MonsterSlayersAPI.BLL.Entities.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("MonsterSlayersAPI.BLL.Entities.DamageTypeResource", b =>
                {
                    b.HasOne("MonsterSlayersAPI.BLL.Entities.DamageType", "DamageType")
                        .WithMany("DamageTypeResources")
                        .HasForeignKey("DamageTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MonsterSlayersAPI.BLL.Entities.Language", "Language")
                        .WithMany("DamageTypeResources")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MonsterSlayersAPI.BLL.Entities.ResourceType", "ResourceType")
                        .WithMany("DamageTypeResources")
                        .HasForeignKey("ResourceTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DamageType");

                    b.Navigation("Language");

                    b.Navigation("ResourceType");
                });

            modelBuilder.Entity("MonsterSlayersAPI.BLL.Entities.MessageResource", b =>
                {
                    b.HasOne("MonsterSlayersAPI.BLL.Entities.Language", "Language")
                        .WithMany("MessageResources")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");
                });

            modelBuilder.Entity("MonsterSlayersAPI.BLL.Entities.Monster", b =>
                {
                    b.HasOne("MonsterSlayersAPI.BLL.Entities.Creature", "Creature")
                        .WithMany("Monsters")
                        .HasForeignKey("CreatureId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creature");
                });

            modelBuilder.Entity("MonsterSlayersAPI.BLL.Entities.MonsterResistance", b =>
                {
                    b.HasOne("MonsterSlayersAPI.BLL.Entities.DamageType", "DamageType")
                        .WithMany("MonsterResistances")
                        .HasForeignKey("DamageTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MonsterSlayersAPI.BLL.Entities.Monster", "Monster")
                        .WithMany("MonsterResistances")
                        .HasForeignKey("MonsterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DamageType");

                    b.Navigation("Monster");
                });

            modelBuilder.Entity("MonsterSlayersAPI.BLL.Entities.MonsterResource", b =>
                {
                    b.HasOne("MonsterSlayersAPI.BLL.Entities.Language", "Language")
                        .WithMany("MonsterResources")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MonsterSlayersAPI.BLL.Entities.Monster", "Monster")
                        .WithMany("MonsterResources")
                        .HasForeignKey("MonsterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MonsterSlayersAPI.BLL.Entities.ResourceType", "ResourceType")
                        .WithMany("MonsterResources")
                        .HasForeignKey("ResourceTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Monster");

                    b.Navigation("ResourceType");
                });

            modelBuilder.Entity("MonsterSlayersAPI.BLL.Entities.MonsterSkill", b =>
                {
                    b.HasOne("MonsterSlayersAPI.BLL.Entities.Monster", "Monster")
                        .WithMany("MonsterSkills")
                        .HasForeignKey("MonsterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MonsterSlayersAPI.BLL.Entities.Skill", "Skill")
                        .WithMany("MonsterSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Monster");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("MonsterSlayersAPI.BLL.Entities.MonsterZone", b =>
                {
                    b.HasOne("MonsterSlayersAPI.BLL.Entities.Monster", "Monster")
                        .WithMany("MonsterZones")
                        .HasForeignKey("MonsterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MonsterSlayersAPI.BLL.Entities.Zone", "Zone")
                        .WithMany("MonsterZones")
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Monster");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("MonsterSlayersAPI.BLL.Entities.Skill", b =>
                {
                    b.HasOne("MonsterSlayersAPI.BLL.Entities.DamageType", "DamageType")
                        .WithMany("Skills")
                        .HasForeignKey("DamageTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DamageType");
                });

            modelBuilder.Entity("MonsterSlayersAPI.BLL.Entities.SkillResource", b =>
                {
                    b.HasOne("MonsterSlayersAPI.BLL.Entities.Language", "Language")
                        .WithMany("SkillResources")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MonsterSlayersAPI.BLL.Entities.ResourceType", "ResourceType")
                        .WithMany("SkillResources")
                        .HasForeignKey("ResourceTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MonsterSlayersAPI.BLL.Entities.Skill", "Skill")
                        .WithMany("SkillResources")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("ResourceType");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("MonsterSlayersAPI.BLL.Entities.User", b =>
                {
                    b.HasOne("MonsterSlayersAPI.BLL.Entities.Class", null)
                        .WithMany("Users")
                        .HasForeignKey("ClassId");
                });

            modelBuilder.Entity("MonsterSlayersAPI.BLL.Entities.ZoneResource", b =>
                {
                    b.HasOne("MonsterSlayersAPI.BLL.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MonsterSlayersAPI.BLL.Entities.ResourceType", "ResourceType")
                        .WithMany()
                        .HasForeignKey("ResourceTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MonsterSlayersAPI.BLL.Entities.Zone", "Zone")
                        .WithMany("ZoneResources")
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("ResourceType");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("MonsterSlayersAPI.BLL.Entities.Battle", b =>
                {
                    b.Navigation("BattleActions");

                    b.Navigation("BattleParticipants");
                });

            modelBuilder.Entity("MonsterSlayersAPI.BLL.Entities.BattleAction", b =>
                {
                    b.Navigation("BattleActionAffecteds");
                });

            modelBuilder.Entity("MonsterSlayersAPI.BLL.Entities.Character", b =>
                {
                    b.Navigation("CharacterResistances");

                    b.Navigation("CharacterSkills");
                });

            modelBuilder.Entity("MonsterSlayersAPI.BLL.Entities.Class", b =>
                {
                    b.Navigation("CharacterSkill");

                    b.Navigation("ClassResources");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("MonsterSlayersAPI.BLL.Entities.Creature", b =>
                {
                    b.Navigation("BattleActionAffected");

                    b.Navigation("BattleParticipants");

                    b.Navigation("Characters");

                    b.Navigation("Monsters");
                });

            modelBuilder.Entity("MonsterSlayersAPI.BLL.Entities.DamageType", b =>
                {
                    b.Navigation("CharacterResistances");

                    b.Navigation("DamageTypeResources");

                    b.Navigation("MonsterResistances");

                    b.Navigation("Skills");
                });

            modelBuilder.Entity("MonsterSlayersAPI.BLL.Entities.Language", b =>
                {
                    b.Navigation("ClassResources");

                    b.Navigation("DamageTypeResources");

                    b.Navigation("MessageResources");

                    b.Navigation("MonsterResources");

                    b.Navigation("SkillResources");
                });

            modelBuilder.Entity("MonsterSlayersAPI.BLL.Entities.Monster", b =>
                {
                    b.Navigation("MonsterResistances");

                    b.Navigation("MonsterResources");

                    b.Navigation("MonsterSkills");

                    b.Navigation("MonsterZones");
                });

            modelBuilder.Entity("MonsterSlayersAPI.BLL.Entities.ResourceType", b =>
                {
                    b.Navigation("ClassResources");

                    b.Navigation("DamageTypeResources");

                    b.Navigation("MonsterResources");

                    b.Navigation("SkillResources");
                });

            modelBuilder.Entity("MonsterSlayersAPI.BLL.Entities.Skill", b =>
                {
                    b.Navigation("BattleActions");

                    b.Navigation("CharacterSkills");

                    b.Navigation("MonsterSkills");

                    b.Navigation("SkillResources");
                });

            modelBuilder.Entity("MonsterSlayersAPI.BLL.Entities.User", b =>
                {
                    b.Navigation("Characters");
                });

            modelBuilder.Entity("MonsterSlayersAPI.BLL.Entities.Zone", b =>
                {
                    b.Navigation("MonsterZones");

                    b.Navigation("ZoneResources");
                });
#pragma warning restore 612, 618
        }
    }
}
